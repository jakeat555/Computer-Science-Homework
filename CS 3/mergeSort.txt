void mergeSort(int [] array, int start, int end){
	if(start >= end){
		return;
	}
	else{
		mid = (start+end)/2
		mergeSort(array, start, mid);
		mergeSort(array,mid,end);
		merge(A,start,mid,end)
	}
}

void merge(int [] a, int start, int mid, int end){
	int m1 = mid-low+1;
	int m2 = high-mid;
	int [] b= new int [m1];
	int [] c= new int [m2];
	for(int i = start; i<= end){
		if(i<mid){
			b[i]=a[i];
		}
		else{
			c[i-mid]=a[i];
		}
	}
	int i = 0;
	int j = 0;
	int k = start;
	while(i<m1 && j<m2){
		if(b[i]<c[j]){
			a[k]=b[i];
			i++;
		}
		else{
			a[k]=c[j];
			j++;
		}
		k++
	}
	if(i<m1){
		for(i<m1;i++){
			a[i]=b[i];
		}
	}
	if(j<m2){
		for(j<m2;j++){
			a[j]=b[j];
		}
	}	
}

void mergeSort(int [] array){
	mergeSort(array,0,array.size-1);
}